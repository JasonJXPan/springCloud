Redis 与其他 key - value 缓存产品有以下三个特点：

    Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。
    Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。
    Redis支持数据的备份，即master-slave模式的数据备份。

Redis 优势

    性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。
    丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。
    原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。
    丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。

Redis与其他key-value存储有什么不同？

    Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。
    Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，应为数据量不能大于硬件内存。在内存数据库方面的另一个优点是， 相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。 同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。


指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose

redis 数据类型:
Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。

string类型是Redis最基本的数据类型，一个键最大能存储512MB。

Hash（哈希）
Redis hash 是一个键值对集合。
Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。
每个 hash 可以存储 232 - 1 键值对（40多亿）

List（列表）
Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。
列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。

Set（集合）
Redis的Set是string类型的无序集合。
集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。
sadd 命令
添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误。
sadd key member
根据集合内元素的唯一性，第二次插入的元素将被忽略。

zset(sorted set：有序集合)
Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。
不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。
zset的成员是唯一的,但分数(score)却可以重复。
zadd 命令
添加元素到集合，元素在集合中存在则更新对应score
    zadd key score member

edis 键命令用于管理 redis 的键。
语法

Redis 键命令的基本语法如下：
    redis 127.0.0.1:6379> COMMAND KEY_NAME
命令执行后输出 (integer) 1，否则将输出 (integer) 0

Redis EXISTS 命令用于检查给定 key 是否存在。
语法

redis EXISTS 命令基本语法如下：

    redis 127.0.0.1:6379> EXISTS KEY_NAME
若 key 存在返回 1 ，否则返回 0 。

Redis Expire 命令用于设置 key 的过期时间。key 过期后将不再可用。
语法
redis Expire 命令基本语法如下：
    redis 127.0.0.1:6379> Expire KEY_NAME TIME_IN_SECONDS
    设置成功返回 1 。 当 key 不存在或者不能为 key 设置过期时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的过期时间)返回 0 。

Redis Keys 命令用于查找所有符合给定模式 pattern 的 key 。。
语法
redis KEYS 命令基本语法如下：
    redis 127.0.0.1:6379> KEYS PATTERN
     KEYS *
     KEYS w3c*

 Redis MOVE 命令用于将当前数据库的 key 移动到给定的数据库 db 当中。
 语法
 redis Move 命令基本语法如下：
     redis 127.0.0.1:6379> MOVE KEY_NAME DESTINATION_DATABASE

         # key 存在于当前数据库

         redis> SELECT 0                             # redis默认使用数据库 0，为了清晰起见，这里再显式指定一次。
         OK

         redis> SET song "secret base - Zone"
         OK

         redis> MOVE song 1                          # 将 song 移动到数据库 1
         (integer) 1

         redis> EXISTS song                          # song 已经被移走
         (integer) 0

         redis> SELECT 1                             # 使用数据库 1
         OK

         redis:1> EXISTS song                        # 证实 song 被移到了数据库 1 (注意命令提示符变成了"redis:1"，表明正在使用数据库 1)
         (integer) 1


         # 当 key 不存在的时候

         redis:1> EXISTS fake_key
         (integer) 0

         redis:1> MOVE fake_key 0                    # 试图从数据库 1 移动一个不存在的 key 到数据库 0，失败
         (integer) 0

         redis:1> select 0                           # 使用数据库0
         OK

         redis> EXISTS fake_key                      # 证实 fake_key 不存在
         (integer) 0


         # 当源数据库和目标数据库有相同的 key 时

         redis> SELECT 0                             # 使用数据库0
         OK
         redis> SET favorite_fruit "banana"
         OK

         redis> SELECT 1                             # 使用数据库1
         OK
         redis:1> SET favorite_fruit "apple"
         OK

         redis:1> SELECT 0                           # 使用数据库0，并试图将 favorite_fruit 移动到数据库 1
         OK

         redis> MOVE favorite_fruit 1                # 因为两个数据库有相同的 key，MOVE 失败
         (integer) 0

         redis> GET favorite_fruit                   # 数据库 0 的 favorite_fruit 没变
         "banana"

         redis> SELECT 1
         OK

         redis:1> GET favorite_fruit                 # 数据库 1 的 favorite_fruit 也是
         "apple"

Redis PERSIST 命令用于移除给定 key 的过期时间，使得 key 永不过期。
语法
redis PERSIST 命令基本语法如下：
    redis 127.0.0.1:6379> PERSIST KEY_NAME

Redis Pttl 命令以毫秒为单位返回 key 的剩余过期时间。
语法
redis Pttl 命令基本语法如下：
    redis 127.0.0.1:6379> PTTL KEY_NAME

Redis TTL 命令以秒为单位返回 key 的剩余过期时间。
语法
redis TTL 命令基本语法如下：
    redis 127.0.0.1:6379> TTL KEY_NAME

Redis RANDOMKEY 命令从当前数据库中随机返回一个 key 。
语法
redis RANDOMKEY 命令基本语法如下：
    redis 127.0.0.1:6379> RANDOMKEY

Redis Rename 命令用于修改 key 的名称 。
语法
redis Rename 命令基本语法如下：
    redis 127.0.0.1:6379> RENAME OLD_KEY_NAME NEW_KEY_NAME
    改名成功时提示 OK ，失败时候返回一个错误。
    当 OLD_KEY_NAME 和 NEW_KEY_NAME 相同，或者 OLD_KEY_NAME 不存在时，返回一个错误。 当 NEW_KEY_NAME 已经存在时， RENAME 命令将覆盖旧值。

Redis Renamenx 命令用于在新的 key 不存在时修改 key 的名称 。
语法
redis Renamenx 命令基本语法如下：
    redis 127.0.0.1:6379> RENAMENX OLD_KEY_NAME NEW_KEY_NAME

Redis Type 命令用于返回 key 所储存的值的类型。
语法
redis Renamenx 命令基本语法如下：
    redis 127.0.0.1:6379> TYPE KEY_NAME

    返回 key 的数据类型，数据类型有：
        none (key不存在)
        string (字符串)
        list (列表)
        set (集合)
        zset (有序集)
        hash (哈希表)

Redis 字符串命令

    Redis SET 命令用于设置给定 key 的值。如果 key 已经存储其他值， SET 就覆写旧值，且无视类型。
    语法
    redis SET 命令基本语法如下：
        redis 127.0.0.1:6379> SET KEY_NAME VALUE
    返回值
    在 Redis 2.6.12 以前版本， SET 命令总是返回 OK 。
    从 Redis 2.6.12 版本开始， SET 在设置操作成功完成时，才返回 OK 。

Redis Get 命令用于获取指定 key 的值。如果 key 不存在，返回 nil 。如果key 储存的值不是字符串类型，返回一个错误。
语法
redis Get 命令基本语法如下：
    redis 127.0.0.1:6379> GET KEY_NAME
        返回值
        返回 key 的值，如果 key 不存在时，返回 nil。 如果 key 不是字符串类型，那么返回一个错误。

Redis Getrange 命令用于获取存储在指定 key 中字符串的子字符串。字符串的截取范围由 start 和 end 两个偏移量决定(包括 start 和 end 在内)。
语法
redis Getrange 命令基本语法如下：
    redis 127.0.0.1:6379> GETRANGE KEY_NAME start end
返回值
截取得到的子字符串。

GETSET KEY_NAME VALUE
返回给定 key 的旧值。 当 key 没有旧值时，即 key 不存在时，返回 nil 。
当 key 存在但不是字符串类型时，返回一个错误。

GETBIT KEY_NAME OFFSET
字符串值指定偏移量上的位(bit)。
当偏移量 OFFSET 比字符串值的长度大，或者 key 不存在时，返回 0 。

Redis Mget 命令返回所有(一个或多个)给定 key 的值。 如果给定的 key 里面，有某个 key 不存在，那么这个 key 返回特殊值 nil 。
MGET KEY1 KEY2 .. KEYN
返回值
一个包含所有给定 key 的值的列表。

Redis Setbit 命令用于对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。
Setbit KEY_NAME OFFSET
指定偏移量原来储存的位

Redis Setex 命令为指定的 key 设置值及其过期时间。如果 key 已经存在， SETEX 命令将会替换旧的值。
SETEX KEY_NAME TIMEOUT VALUE
设置成功时返回 OK 。

Redis Setnx（SET if Not eXists） 命令在指定的 key 不存在时，为 key 设置指定的值。
SETNX KEY_NAME VALUE
设置成功，返回 1 。 设置失败，返回 0 。

Redis Setrange 命令用指定的字符串覆盖给定 key 所储存的字符串值，覆盖的位置从偏移量 offset 开始。
SETRANGE KEY_NAME OFFSET VALUE
被修改后的字符串长度。

Redis Strlen 命令用于获取指定 key 所储存的字符串值的长度。当 key 储存的不是字符串值时，返回一个错误。
STRLEN KEY_NAME
字符串值的长度。 当 key 不存在时，返回 0。

Redis Mset 命令用于同时设置一个或多个 key-value 对。
MSET key1 value1 key2 value2 .. keyN valueN
总是返回 OK

Redis Msetnx 命令用于所有给定 key 都不存在时，同时设置一个或多个 key-value 对。
MSETNX key1 value1 key2 value2 .. keyN valueN
当所有 key 都成功设置，返回 1 。 如果所有给定 key 都设置失败(至少有一个 key 已经存在)，那么返回 0 。

Redis Incr 命令将 key 中储存的数字值增一。
如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作。
如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。
本操作的值限制在 64 位(bit)有符号数字表示之内。
INCR KEY_NAME

Redis Incrby 命令将 key 中储存的数字加上指定的增量值。
如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCRBY 命令。
如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误， 如果类型是float也会返回错误。
本操作的值限制在 64 位(bit)有符号数字表示之内。
INCRBY KEY_NAME INCR_AMOUNT
加上指定的增量值之后， key 的值

Redis Incrbyfloat 命令为 key 中所储存的值加上指定的浮点数增量值。
如果 key 不存在，那么 INCRBYFLOAT 会先将 key 的值设为 0 ，再执行加法操作。
INCRBYFLOAT KEY_NAME INCR_AMOUNT
执行命令之后 key 的值。

Redis Decr 命令将 key 中储存的数字值减一。
DECR KEY_NAME
如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 DECR 操作。
如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误， 如果类型是float也会返回错误。
本操作的值限制在 64 位(bit)有符号数字表示之内。

Redis Decrby 命令将 key 所储存的值减去指定的减量值。
DECRBY KEY_NAME DECREMENT_AMOUNT
如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 DECRBY 操作。
如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。
本操作的值限制在 64 位(bit)有符号数字表示之内。没有decrbyfloat

Redis Append 命令用于为指定的 key 追加值。
如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。
如果 key 不存在， APPEND 就简单地将给定 key 设为 value ，就像执行 SET key value 一样。
APPEND KEY_NAME NEW_VALUE
追加指定值之后，返回 key 中字符串的长度。

Redis 哈希(Hash)
Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。
Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。

Redis Hdel 命令用于删除哈希表 key 中的一个或多个指定字段，不存在的字段将被忽略。
HDEL KEY_NAME FIELD1.. FIELDN
被成功删除字段的数量，不包括被忽略的字段。

Redis Hexists 命令用于查看哈希表的指定字段是否存在。
HEXISTS KEY_NAME FIELD_NAME
如果哈希表含有给定字段，返回 1 。 如果哈希表不含有给定字段，或 key 不存在，返回 0 。

Redis Hget 命令用于返回哈希表中指定字段的值。
HGET KEY_NAME FIELD_NAME
返回给定字段的值。如果给定的字段或 key 不存在时，返回 nil 。

Redis Hgetall 命令用于返回哈希表中，所有的字段和值。
在返回值里，紧跟每个字段名(field name)之后是字段的值(value)，所以返回值的长度是哈希表大小的两倍。
HGETALL KEY_NAME
以列表形式返回哈希表的字段及字段值。 若 key 不存在，返回空列表。


Redis Hincrby 命令用于为哈希表中的字段值加上指定增量值。
增量也可以为负数，相当于对指定字段进行减法操作。
如果哈希表的 key 不存在，一个新的哈希表被创建并执行 HINCRBY 命令。
如果指定的字段不存在，那么在执行命令前，字段的值被初始化为 0 。
对一个储存字符串值的字段执行 HINCRBY 命令将造成一个错误。
本操作的值被限制在 64 位(bit)有符号数字表示之内。
HINCRBY KEY_NAME FIELD_NAME INCR_BY_NUMBER
执行 HINCRBY 命令之后，哈希表中字段的值。

Redis Hincrbyfloat 命令用于为哈希表中的字段值加上指定浮点数增量值。
如果指定的字段不存在，那么在执行命令前，字段的值被初始化为 0 。
HINCRBYFLOAT KEY_NAME FIELD_NAME INCR_BY_NUMBER
执行 Hincrbyfloat 命令之后，哈希表中字段的值。

Redis Hkeys 命令用于获取哈希表中的所有字段名。
HKEYS KEY_NAME FIELD_NAME INCR_BY_NUMBER
包含哈希表中所有字段的列表。 当 key 不存在时，返回一个空列表。

Redis Hlen 命令用于获取哈希表中字段的数量。
HLEN KEY_NAME
哈希表中字段的数量。 当 key 不存在时，返回 0 。

Redis Hmget 命令用于返回哈希表中，一个或多个给定字段的值。
如果指定的字段不存在于哈希表，那么返回一个 nil 值。
HMGET KEY_NAME FIELD1...FIELDN
一个包含多个给定字段关联值的表，表值的排列顺序和指定字段的请求顺序一样。

Redis Hmset 命令用于同时将多个 field-value (字段-值)对设置到哈希表中。
此命令会覆盖哈希表中已存在的字段。
如果哈希表不存在，会创建一个空哈希表，并执行 HMSET 操作。
HMSET KEY_NAME FIELD1 VALUE1 ...FIELDN VALUEN
如果命令执行成功，返回 OK 。

Redis Hset 命令用于为哈希表中的字段赋值 。
如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。
如果字段已经存在于哈希表中，旧值将被覆盖。
HSET KEY_NAME FIELD VALUE
如果字段是哈希表中的一个新建字段，并且值设置成功，返回 1 。 如果哈希表中域字段已经存在且旧值已被新值覆盖，返回 0 。

Redis Hsetnx 命令用于为哈希表中不存在的的字段赋值 。
如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。
如果字段已经存在于哈希表中，操作无效。
如果 key 不存在，一个新哈希表被创建并执行 HSETNX 命令。
HSETNX KEY_NAME FIELD VALUE
设置成功，返回 1 。 如果给定字段已经存在且没有操作被执行，返回 0 。

Redis Hvals 命令返回哈希表所有字段的值。
HVALS KEY_NAME FIELD VALUE
一个包含哈希表中所有值的表。 当 key 不存在时，返回一个空表。

Redis 列表(List)
Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）
一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。

Redis Blpop 命令移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
BLPOP LIST1 LIST2 .. LISTN TIMEOUT
如果列表为空，返回一个 nil 。 否则，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 key ，第二个元素是被弹出元素的值。
按顺序从list1 list2中取第一个值，如果list1为空，那么从list2中基础获取

Redis Brpop 命令移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
BRPOP LIST1 LIST2 .. LISTN TIMEOUT
假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。 反之，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 key ，第二个元素是被弹出元素的值。
按顺序从list1 list2中取最后一个值，如果list1为空，那么从list2中基础获取

Redis Brpoplpush 命令从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
BRPOPLPUSH LIST1 ANOTHER_LIST TIMEOUT
假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。 反之，返回一个含有两个元素的列表，第一个元素是被弹出元素的值，第二个元素是等待时长。

Redis Lindex 命令用于通过索引获取列表中的元素。你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。
LINDEX KEY_NAME INDEX_POSITION
列表中下标为指定索引值的元素。 如果指定索引值不在列表的区间范围内，返回 nil 。

Redis Linsert 命令用于在列表的元素前或者后插入元素。 当指定元素不存在于列表中时，不执行任何操作。 当列表不存在时，被视为空列表，不执行任何操作。 如果 key 不是列表类型，返回一个错误。
LINSERT KEY_NAME BEFORE EXISTING_VALUE NEW_VALUE
如果命令执行成功，返回插入操作完成之后，列表的长度。 如果没有找到指定元素 ，返回 -1 。 如果 key 不存在或为空列表，返回 0 。

Redis Llen 命令用于返回列表的长度。 如果列表 key 不存在，则 key 被解释为一个空列表，返回 0 。 如果 key 不是列表类型，返回一个错误。
LLEN KEY_NAME
列表的长度。

Redis Lpop 命令用于移除并返回列表的第一个元素。
LPOP KEY_NAME
列表的第一个元素。 当列表 key 不存在时，返回 nil 。

Redis Lpush 命令将一个或多个值插入到列表头部。 如果 key 不存在，一个空列表会被创建并执行 LPUSH 操作。 当 key 存在但不是列表类型时，返回一个错误。
LPUSH KEY_NAME VALUE1.. VALUEN
执行 LPUSH 命令后，列表的长度。

Redis Lpushx 将一个或多个值插入到已存在的列表头部，列表不存在时操作无效。
LPUSHX KEY_NAME VALUE1.. VALUEN
LPUSHX 命令执行之后，列表的长度。

Redis Lrange 返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。 其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。
LRANGE KEY_NAME START END
一个列表，包含指定区间内的元素。
Redis Lrem 根据参数 COUNT 的值，移除列表中与参数 VALUE 相等的元素。
COUNT 的值可以是以下几种：
    count > 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 COUNT 。
    count < 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 COUNT 的绝对值。
    count = 0 : 移除表中所有与 VALUE 相等的值。
语法
redis Lrem 命令基本语法如下：
    redis 127.0.0.1:6379> LREM KEY_NAME COUNT VALUE

被移除元素的数量。 列表不存在时返回 0 。

Redis Lset 通过索引来设置元素的值。
当索引参数超出范围，或对一个空列表进行 LSET 时，返回一个错误。
LSET KEY_NAME INDEX VALUE
操作成功返回 ok ，否则返回错误信息。

Redis Ltrim 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。
下标 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。
LTRIM KEY_NAME START STOP
命令执行成功时，返回 ok 。

Redis Rpop 命令用于移除并返回列表的最后一个元素。
RPOP KEY_NAME
列表的最后一个元素。 当列表不存在时，返回 nil 。

Redis Rpoplpush 命令用于移除列表的最后一个元素，并将该元素添加到另一个列表并返回。
RPOPLPUSH SOURCE_KEY_NAME DESTINATION_KEY_NAME
被弹出的元素

Redis Rpush 命令用于将一个或多个值插入到列表的尾部(最右边)。
如果列表不存在，一个空列表会被创建并执行 RPUSH 操作。 当列表存在但不是列表类型时，返回一个错误。
RPUSH KEY_NAME VALUE1..VALUEN
执行 RPUSH 操作后，列表的长度。

Redis Rpushx 命令用于将一个或多个值插入到已存在的列表尾部(最右边)。如果列表不存在，操作无效。
RPUSHX KEY_NAME VALUE1..VALUEN
执行 Rpushx 操作后，列表的长度。

Redis 集合(Set)
Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。
Redis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。
集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。

Redis Sadd 命令将一个或多个成员元素加入到集合中，已经存在于集合的成员元素将被忽略。
假如集合 key 不存在，则创建一个只包含添加的元素作成员的集合。
当集合 key 不是集合类型时，返回一个错误。
注意：在Redis2.4版本以前， SADD 只接受单个成员值。

SADD KEY_NAME VALUE1..VALUEN

被添加到集合中的新元素的数量，不包括被忽略的元素。

Redis Scard 命令返回集合中元素的数量。
SCARD KEY_NAME
集合的数量。 当集合 key 不存在时，返回 0 。

Redis Sdiff 命令返回给定集合之间的差集。不存在的集合 key 将视为空集。
SDIFF FIRST_KEY OTHER_KEY1..OTHER_KEYN
包含差集成员的列表。

Redis Sdiffstore 命令将给定集合之间的差集存储在指定的集合中。如果指定的集合 key 已存在，则会被覆盖。
SDIFFSTORE DESTINATION_KEY KEY1..KEYN
结果集中的元素数量

Redis Sinter 命令返回给定所有给定集合的交集。 不存在的集合 key 被视为空集。 当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。
SINTER KEY KEY1..KEYN
交集成员的列表

Redis Sinterstore 命令将给定集合之间的交集存储在指定的集合中。如果指定的集合已经存在，则将其覆盖。
SINTERSTORE DESTINATION_KEY KEY KEY1..KEYN
交集成员的列表。

Redis Sismember 命令判断成员元素是否是集合的成员。
SISMEMBER KEY VALUE
如果成员元素是集合的成员，返回 1 。 如果成员元素不是集合的成员，或 key 不存在，返回 0 。

Redis Smembers 命令返回集合中的所有的成员。 不存在的集合 key 被视为空集合。
SMEMBERS KEY
集合中的所有成员

Redis Smove 命令将指定成员 member 元素从 source 集合移动到 destination 集合。
SMOVE 是原子性操作。
如果 source 集合不存在或不包含指定的 member 元素，则 SMOVE 命令不执行任何操作，仅返回 0 。否则， member 元素从 source 集合中被移除，并添加到 destination 集合中去。
当 destination 集合已经包含 member 元素时， SMOVE 命令只是简单地将 source 集合中的 member 元素删除。
当 source 或 destination 不是集合类型时，返回一个错误。

SMOVE SOURCE DESTINATION MEMBER
如果成员元素被成功移除，返回 1 。 如果成员元素不是 source 集合的成员，并且没有任何操作对 destination 集合执行，那么返回 0 。

Redis Spop 命令用于移除并返回集合中的一个随机元素。
SPOP KEY COUNT
被移除的随机元素。 当集合不存在或是空集时，返回 nil 。

Redis Srandmember 命令用于返回集合中的一个随机元素。
从 Redis 2.6 版本开始， Srandmember 命令接受可选的 count 参数：
    如果 count 为正数，且小于集合基数，那么命令返回一个包含 count 个元素的数组，数组中的元素各不相同。如果 count 大于等于集合基数，那么返回整个集合。
    如果 count 为负数，那么命令返回一个数组，数组中的元素可能会重复出现多次，而数组的长度为 count 的绝对值。
该操作和 SPOP 相似，但 SPOP 将随机元素从集合中移除并返回，而 Srandmember 则仅仅返回随机元素，而不对集合进行任何改动。

Redis Srem 命令用于移除集合中的一个或多个成员元素，不存在的成员元素会被忽略。
当 key 不是集合类型，返回一个错误。
在 Redis 2.4 版本以前， SREM 只接受单个成员值。
SREM KEY MEMBER1..MEMBERN
被成功移除的元素的数量，不包括被忽略的元素。

Redis Sunion 命令返回给定集合的并集。不存在的集合 key 被视为空集。
SUNION KEY KEY1..KEYN
并集成员的列表

Redis Sunionstore 命令将给定集合的并集存储在指定的集合 destination 中。
SUNIONSTORE DESTINATION KEY KEY1..KEYN
结果集中的元素数量。

Redis Sscan 命令用于迭代集合键中的元素。
SSCAN KEY [MATCH pattern] [COUNT count]
数组列表

Redis 有序集合(sorted set)
Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。
不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。
有序集合的成员是唯一的,但分数(score)却可以重复。
集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。
ZADD KEY_NAME SCORE1 VALUE1.. SCOREN VALUEN
被成功添加的新成员的数量，不包括那些被更新的、已经存在的成员。

Redis Zcard 命令用于计算集合中元素的数量。
ZCARD KEY_NAME
当 key 存在且是有序集类型时，返回有序集的基数。 当 key 不存在时，返回 0 。

Redis Zcount 命令用于计算有序集合中指定分数区间的成员数量。
ZCOUNT key min max
分数值在 min 和 max 之间的成员的数量。

Redis Zincrby 命令对有序集合中指定成员的分数加上增量 increment
可以通过传递一个负数值 increment ，让分数减去相应的值，比如 ZINCRBY key -5 member ，就是让 member 的 score 值减去 5 。
当 key 不存在，或分数不是 key 的成员时， ZINCRBY key increment member 等同于 ZADD key increment member 。
当 key 不是有序集类型时，返回一个错误。
分数值可以是整数值或双精度浮点数。
ZINCRBY key increment member
member 成员的新分数值，以字符串形式表示。

Redis Zinterstore 命令计算给定的一个或多个有序集的交集，其中给定 key 的数量必须以 numkeys 参数指定，并将该交集(结果集)储存到 destination 。
默认情况下，结果集中某个成员的分数值是所有给定集下该成员分数值之和。
ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]
保存到目标结果集的的成员数量。

Redis Zlexcount 命令在计算有序集合中指定字典区间内成员数量。 lexicographical order
ZLEXCOUNT KEY MIN MAX
指定区间内的成员数量。

Redis Zrange 返回有序集中，指定区间内的成员。
其中成员的位置按分数值递增(从小到大)来排序。
具有相同分数值的成员按字典序(lexicographical order )来排列。
如果你需要成员按
值递减(从大到小)来排列，请使用 ZREVRANGE 命令。
下标参数 start 和 stop 都以 0 为底，也就是说，以 0 表示有序集第一个成员，以 1 表示有序集第二个成员，以此类推。
你也可以使用负数下标，以 -1 表示最后一个成员， -2 表示倒数第二个成员，以此类推。
ZRANGE key start stop [WITHSCORES]
指定区间内，带有分数值(可选)的有序集成员的列表。

Redis Zrangebylex 通过字典区间返回有序集合的成员。
ZRANGEBYLEX key min max [LIMIT offset count]
指定区间内的元素列表。
redis 127.0.0.1:6379> ZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g
(integer) 7
redis 127.0.0.1:6379> ZRANGEBYLEX myzset - [c
1) "a"
2) "b"
3) "c"
redis 127.0.0.1:6379> ZRANGEBYLEX myzset - (c
1) "a"
2) "b"
redis 127.0.0.1:6379> ZRANGEBYLEX myzset [aaa (g
1) "b"
2) "c"
3) "d"
4) "e"
5) "f"

返回值
指定区间内，带有分数值(可选)的有序集成员的列表。
实例

    redis 127.0.0.1:6379> ZADD salary 2500 jack                        # 测试数据
    (integer) 0
    redis 127.0.0.1:6379> ZADD salary 5000 tom
    (integer) 0
    redis 127.0.0.1:6379> ZADD salary 12000 peter
    (integer) 0



Redis Zrangebyscore 返回有序集合中指定分数区间的成员列表。有序集成员按分数值递增(从小到大)次序排列。

具有相同分数值的成员按字典序来排列(该属性是有序集提供的，不需要额外的计算)。

默认情况下，区间的取值使用闭区间 (小于等于或大于等于)，你也可以通过给参数前增加 ( 符号来使用可选的开区间 (小于或大于)。

举个例子：

    ZRANGEBYSCORE zset (1 5

返回所有符合条件 1 < score <= 5 的成员，而

    ZRANGEBYSCORE zset (5 (10

则返回所有符合条件 5 < score < 10 的成员。
语法

redis Zrangebyscore 命令基本语法如下：

    redis 127.0.0.1:6379> ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]

返回值

指定区间内，带有分数值(可选)的有序集成员的列表。
实例

    redis 127.0.0.1:6379> ZADD salary 2500 jack                        # 测试数据
    (integer) 0
    redis 127.0.0.1:6379> ZADD salary 5000 tom
    (integer) 0
    redis 127.0.0.1:6379> ZADD salary 12000 peter
    (integer) 0

    redis 127.0.0.1:6379> ZRANGEBYSCORE salary -inf +inf               # 显示整个有序集
    1) "jack"
    2) "tom"
    3) "peter"

    redis 127.0.0.1:6379> ZRANGEBYSCORE salary -inf +inf WITHSCORES    # 显示整个有序集及成员的 score 值
    1) "jack"
    2) "2500"
    3) "tom"
    4) "5000"
    5) "peter"
    6) "12000"

    redis 127.0.0.1:6379> ZRANGEBYSCORE salary -inf 5000 WITHSCORES    # 显示工资 <=5000 的所有成员
    1) "jack"
    2) "2500"
    3) "tom"
    4) "5000"
    redis 127.0.0.1:6379> ZRANGEBYSCORE salary (5000 400000            # 显示工资大于 5000 小于等于 400000 的成员
    1) "peter"


Redis Zrank 返回有序集中指定成员的排名。其中有序集成员按分数值递增(从小到大)顺序排列。
ZRANK key member
如果成员是有序集 key 的成员，返回 member 的排名。 如果成员不是有序集 key 的成员，返回 nil 。
从0 开始

Redis Zrem 命令用于移除有序集中的一个或多个成员，不存在的成员将被忽略。
当 key 存在但不是有序集类型时，返回一个错误。
注意： 在 Redis 2.4 版本以前， ZREM 每次只能删除一个元素。
ZRANK key member
被成功移除的成员的数量，不包括被忽略的成员。

Redis Zremrangebylex 命令用于移除有序集合中给定的字典区间的所有成员。
ZREMRANGEBYLEX key min max
被成功移除的成员的数量，不包括被忽略的成员。
redis 127.0.0.1:6379> ZADD myzset 0 aaaa 0 b 0 c 0 d 0 e
(integer) 5
redis 127.0.0.1:6379> ZADD myzset 0 foo 0 zap 0 zip 0 ALPHA 0 alpha
(integer) 5
redis 127.0.0.1:6379> ZRANGE myzset 0 -1
1) "ALPHA"
 2) "aaaa"
 3) "alpha"
 4) "b"
 5) "c"
 6) "d"
 7) "e"
 8) "foo"
 9) "zap"
10) "zip"
redis 127.0.0.1:6379> ZREMRANGEBYLEX myzset [alpha [omega
(integer) 6
redis 127.0.0.1:6379> ZRANGE myzset 0 -1
1) "ALPHA"
2) "aaaa"
3) "zap"
4) "zip"

Redis Zremrangebyrank 命令用于移除有序集中，指定排名(rank)区间内的所有成员。
ZREMRANGEBYRANK key start stop
被移除成员的数量。


Redis Zremrangebyscore 命令用于移除有序集中，指定分数（score）区间内的所有成员。
ZREMRANGEBYSCORE key min max
    redis 127.0.0.1:6379> ZRANGE salary 0 -1 WITHSCORES          # 显示有序集内所有成员及其 score 值
    1) "tom"
    2) "2000"
    3) "peter"
    4) "3500"
    5) "jack"
    6) "5000"

    redis 127.0.0.1:6379> ZREMRANGEBYSCORE salary 1500 3500      # 移除所有薪水在 1500 到 3500 内的员工
    (integer) 2

    redis> ZRANGE salary 0 -1 WITHSCORES          # 剩下的有序集成员
    1) "jack"
    2) "5000"


 Redis Zrevrange 命令返回有序集中，指定区间内的成员。
 其中成员的位置按分数值递减(从大到小)来排列。
 具有相同分数值的成员按字典序的逆序(reverse lexicographical order)排列。
 除了成员按分数值递减的次序排列这一点外， ZREVRANGE 命令的其他方面和 ZRANGE 命令一样。
 ZREVRANGE key start stop [WITHSCORES]
 指定区间内，带有分数值(可选)的有序集成员的列表。  reverse

 Redis Zrevrangebyscore 返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
 具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
 除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样。
ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]

 Redis Zrevrank 命令返回有序集中成员的排名。其中有序集成员按分数值递减(从大到小)排序。
 排名以 0 为底，也就是说， 分数值最大的成员排名为 0 。
 使用 ZRANK 命令可以获得成员按分数值递增(从小到大)排列的排名。
 ZREVRANK key member

 Redis Zscore 命令返回有序集中，成员的分数值。 如果成员元素不是有序集 key 的成员，或 key 不存在，返回 nil 。
 ZSCORE key member
 成员的分数值，以字符串形式表示。

 Redis Zunionstore 命令计算给定的一个或多个有序集的并集，其中给定 key 的数量必须以 numkeys 参数指定，并将该并集(结果集)储存到 destination 。
 默认情况下，结果集中某个成员的分数值是所有给定集下该成员分数值之和 。
 ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]
保存到 destination 的结果集的成员数量。

 Redis Zscan 命令用于迭代有序集合中的元素（包括元素成员和元素分值）
 redis 127.0.0.1:6379> ZSCAN key cursor [MATCH pattern] [COUNT count]
 返回的每个元素都是一个有序集合元素，一个有序集合元素由一个成员（member）和一个分值（score）组成。


































































